<div class="row">
    <div class="col-12">
        <div class="canvas-container">
            <h1>Detail: <span class="text-primary">[% hostname %]</span></h1>
            <canvas id="cpuUsageChart"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js" language="javascript" type="text/javascript"></script>
<script language="javascript" type="text/javascript">
    document.addEventListener("DOMContentLoaded", () => {
        console.log(`Endpoint loaded: [% statusUrl %]`);
        fetchAndUpdateData();
    });

    const statusUrl = "[% statusUrl %]";
    const statusRecords = []; // Array to store status records
    const labels = []; // Timestamps for the x-axis
    const data = {
        labels: labels,
        datasets: [{
            label: 'CPU Usage (%)',
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            data: [],
            fill: true,
        }]
    };

   const config = {
    type: 'line',
    data: data,
    options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
            duration: 500,
            easing: 'easeInOutQuad'
        },
        scales: {
            x: {
                title: {
                    display: true,
                    text: 'Timestamp',
                }
            },
            y: {
                title: {
                    display: true,
                    text: 'CPU Usage (%)',
                },
                min: 0,
                max: 100,
            }
        }
    }
};


    const cpuUsageChart = new Chart(document.getElementById('cpuUsageChart'), config);

    async function fetchAndUpdateData() {
    try {
        const response = await fetch(statusUrl);
        const newStatusRecords = await response.json();

        newStatusRecords.forEach(record => {
            const timestamp = new Date(record.timestamp).toLocaleTimeString();
            const cpu = record.cpu;

            // Check if the new timestamp already exists (to avoid duplicates)
            if (!labels.includes(timestamp)) {
                // Add the new data point
                labels.push(timestamp);
                data.datasets[0].data.push(cpu);

                // Keep only the last 20 points
                if (labels.length > 20) {
                    labels.shift();
                    data.datasets[0].data.shift();
                }
            }
        });

        cpuUsageChart.update('none');
    } catch (error) {
        console.error('Error fetching or updating data:', error);
    }
}

    setInterval(fetchAndUpdateData, 3000);
</script>